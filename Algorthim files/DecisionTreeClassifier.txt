#These lines import the necessary libraries: DecisionTreeClassifier from the sklearn.tree module, train_test_split from the sklearn.model_selection module, and accuracy_score from the sklearn.metrics module.
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score



#This line initializes a DecisionTreeClassifier object with a maximum depth of 5.
tree = DecisionTreeClassifier(max_depth=5)

#This line splits the data into training and testing sets using the train_test_split function. The data is split into 80% training data and 20% testing data. The random_state parameter is set to 42 for reproducibility.

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#This line fits the decision tree model to the training data using the fit method.

tree.fit(X_train, y_train)

#These lines predict the class labels for the testing and training data using the predict method.

y_test_tree = tree.predict(X_test)
y_train_tree = tree.predict(X_train)

#These lines calculate the accuracy of the model on the training and testing data using the accuracy_score function.

acc_train_tree = accuracy_score(y_train,y_train_tree)
acc_test_tree = accuracy_score(y_test,y_test_tree)

#These lines print the accuracy of the model on the training and testing data.

print("Decision Tree: Accuracy on training Data: {:.3f}".format(acc_train_tree))
print("Decision Tree: Accuracy on test Data: {:.3f}".format(acc_test_tree))

#These lines create a horizontal bar plot to show the importance of each feature in the decision tree model.

plt.figure(figsize=(9,7))
n_features = X_train.shape[1]
plt.barh(range(n_features), tree.feature_importances_, align='center')
plt.yticks(np.arange(n_features), X_train.columns)
plt.xlabel("Feature importance")
plt.ylabel("Feature")
plt.show()

#This line stores the results of the decision tree model (i.e., the model name, and its training and testing accuracies) in a Pandas DataFrame called results. The storeResults function appends the model name and corresponding training and testing accuracies to the ML_Model, acc_train, and acc_test lists, respectively, which are later used to create the results DataFrame.

storeResults('Decision Tree', acc_train_tree, acc_test_tree)
#These are the necessary libraries required to read and manipulate data, plot graphs, and perform machine learning operations.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt








#This line reads the CSV file urldata.csv and stores the data in a Pandas DataFrame called data.

data = pd.read_csv('urldata.csv')

#This line displays the first five rows of the DataFrame data.

data.head()

#This line displays the number of rows and columns in the DataFrame data.

data.shape

#This line displays the column names in the DataFrame data.

data.columns


#This line displays information about the DataFrame data, including the number of non-null values in each column and the data type of each column.

data.info()

#This line creates histograms for each numerical column in the DataFrame data with 50 bins and displays the plots using matplotlib.

data.hist(bins = 50,figsize = (15,15))
plt.show()

#This line creates a heatmap of the correlation matrix of the numerical columns in the DataFrame data using seaborn and displays the plot using matplotlib.

plt.figure(figsize=(15,13))
sns.heatmap(data.corr())
plt.show()

#This line displays descriptive statistics for the numerical columns in the DataFrame data, including the count, mean, standard deviation, minimum, maximum, and quartile values.



data.describe()

#This line creates a new DataFrame dfsa by dropping the Domain column from the DataFrame data along the horizontal axis (axis=1) and making a copy of the resulting DataFrame.

dfsa = data.drop(['Domain'], axis = 1).copy()

#This line displays the sum of null values in each column of the DataFrame dfsa.

dfsa.isnull().sum()

#This line shuffles the rows of the DataFrame dfsa randomly and resets the index to create a new DataFrame called dfsa. The head() function is used to display the first five rows of the new DataFrame.

dfsa = dfsa.sample(frac=1).reset_index(drop=True)
dfsa.head()

#This line creates a target variable y containing the values in the Label column of the DataFrame dfsa. It also creates a feature matrix X containing all the columns in dfsa except the Label column.

y = dfsa['Label']
X = dfsa.drop('Label',axis=1) 

#This line displays the number of rows and columns in the feature matrix X and the target variable y.

X.shape, y.shape

#This line imports the accuracy_score function from the sklearn.metrics module.

from sklearn.metrics import accuracy_score

#These lines initialize three empty lists ML_Model, acc_train, and acc_test. They also define a function storeResults that appends the input model name, training accuracy score, and testing accuracy score to the corresponding lists.


ML_Model = []
acc_train = []
acc_test = []
def storeResults(model, a,b):
  ML_Model.append(model)
  acc_train.append(round(a, 3))
  acc_test.append(round(b, 3))

#These lines create a Pandas DataFrame called results with three columns: ML Model, Train Accuracy, and Test Accuracy. The data for each column is taken from the corresponding lists ML_Model, acc_train, and acc_test.

results = pd.DataFrame({ 'ML Model': ML_Model,    
                         'Train Accuracy': acc_train,
                        'Test Accuracy': acc_test})
results

#The sort_values function is then used to sort the results DataFrame in descending order based on the values in the Test Accuracy column, and then by the values in the Train Accuracy column. The sorted DataFrame is displayed.

results.sort_values(by=['Test Accuracy', 'Train Accuracy'], ascending=False)